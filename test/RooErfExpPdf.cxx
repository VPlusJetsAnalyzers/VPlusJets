/* -*- mode: c++ -*- ********************************************************* 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooErfExpPdf.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooErfExpPdf) 

RooErfExpPdf::RooErfExpPdf(const char *name, const char *title, 
			   RooAbsReal& _x,
			   RooAbsReal& _c,
			   RooAbsReal& _offset,
			   RooAbsReal& _width,
			   int _onOff) : RooAbsPdf(name,title), 
  x("x","x",this,_x),
  c("c","c",this,_c),
  offset("offset","offset",this,_offset),
  width("width","width",this,_width),
  onOff(_onOff)
{ 

  if (_onOff < 0)
    onOff = -1;
  else
    onOff = 1;
} 


RooErfExpPdf::RooErfExpPdf(const RooErfExpPdf& other, const char* name) :  
  RooAbsPdf(other,name), 
  x("x",this,other.x),
  c("c",this,other.c),
  offset("offset",this,other.offset),
  width("width",this,other.width),
  onOff(other.onOff) 
 { 
 } 



 Double_t RooErfExpPdf::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return TMath::Exp(c*x)*(1.+ onOff*TMath::Erf((x-offset)/width))*0.5 ; 
 } 



 Int_t RooErfExpPdf::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED, 
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS 
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs 
   // EXPRESSION MULTIPLE TIMES

   if (matchArgs(allVars,analVars,x)) return 1 ; 
   return 0 ; 
 } 



 Double_t RooErfExpPdf::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(rangeName) AND x.max(rangeName) WILL RETURN THE INTEGRATION
   // BOUNDARIES FOR EACH OBSERVABLE x

   if (code==1) { 
     double minTerm(indefIntegral(x.min(rangeName)));
     double maxTerm(indefIntegral(x.max(rangeName)));

     // std::cout << "c: " << c << " offset: " << offset << " width: " << width
     // 	       << '\n'
     // 	       << "maxTerm - minTerm: " << maxTerm << " - " 
     // 	       << minTerm << '\n'
     // 	       << "integral: " << (maxTerm-minTerm) << '\n';
     return (maxTerm-minTerm) ;
   } 
   return 0 ; 
 } 

Double_t RooErfExpPdf::indefIntegral(double xval) const {
  return (onOff*TMath::Exp(c*c*width*width/4. + c*offset) *
	  TMath::Erf((c*width*width + 2*offset - 2*xval)/width/2) +
	  TMath::Exp(c*xval) * 
	  (1 - onOff*TMath::Erf((offset-xval)/width)))/2/c;
}
