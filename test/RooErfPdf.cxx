/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooErfPdf.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooErfPdf) 

RooErfPdf::RooErfPdf(const char *name, const char *title, 
		     RooAbsReal& _x,
		     RooAbsReal& _turnOn,
		     RooAbsReal& _width,
		     int _onOff) : RooAbsPdf(name,title), 
  x("x","x",this,_x),
  turnOn("turnOn","turnOn",this,_turnOn),
  width("width","width",this,_width),
  onOff(_onOff)
{ 
  if (_onOff < 0)
    onOff = -1;
  else
    onOff = 1;
} 


RooErfPdf::RooErfPdf(const RooErfPdf& other, const char* name) :  
  RooAbsPdf(other,name), 
  x("x",this,other.x),
  turnOn("turnOn",this,other.turnOn),
  width("width",this,other.width),
  onOff(other.onOff)
{ 
} 



 Double_t RooErfPdf::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return (1.+onOff*TMath::Erf((x-turnOn)/width))*0.5 ; 
 }



 Int_t RooErfPdf::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED, 
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS 
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs 
   // EXPRESSION MULTIPLE TIMES

   if (matchArgs(allVars,analVars,x)) return 1 ; 
   return 0 ; 
 } 



 Double_t RooErfPdf::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(rangeName) AND x.max(rangeName) WILL RETURN THE INTEGRATION
   // BOUNDARIES FOR EACH OBSERVABLE x

   if (code==1) {
     
     return  0.5*(x.max(rangeName)-x.min(rangeName) + 
		  onOff*(indefErfIntegral(x.max(rangeName)) - 
			 indefErfIntegral(x.min(rangeName))));
   } 
   return 0 ; 
 } 


double RooErfPdf::indefErfIntegral(double val) const {
  static double const rootpi = TMath::Sqrt(TMath::Pi());
  return (val-turnOn)*TMath::Erf((val-turnOn)/width) + 
    width/rootpi*TMath::Exp(-(val-turnOn)*(val-turnOn)/width/width);
}

void RooErfPdf::printMultiline(ostream& os, Int_t contents, 
			       Bool_t verbose, TString indent) const {
  RooAbsPdf::printMultiline(os, contents,verbose,indent);
  os << indent << "--- RooErfPdf --" << '\n';
  os << indent << "onOff: " << onOff << endl;
}
